<?xml version="1.0" encoding="UTF-8"?>
<university>
  <course>
    <title>
      HTML tutorial
    </title>
    <units>
      <unit>
        <title>
          Unit 1: Introduction and Tags
        </title>
        <lesson>
          <description>HTML stands for Hyper Text Markup Language.
            It is the standard markup language for creating Web pages
            HTML describes the structure of a Web page
            and consists of a series of elements.
            HTML elements tell the browser how to display the content
            also its elements label pieces of content such as "this is a heading", "this is a paragraph", "this is a link", etc.</description>
          <description>p: Allows us to write a paragraph within the tags, just like a description of a certain thing! &lt;p&gt; description &lt;/p&gt;</description>
          <description>h: We can write our headers in here with the following order from the biggest to the smallest h1, h2, ... , h6. &lt;h2&gt; header &lt;/h2&gt;</description>
          <description>a: This is a very useful tag that we can use to link to other web pages! we have to use the attribute href inorder to provide the link! &lt;a href="http://facebook.com"&gt; link &lt;/a&gt;</description>
          <description>Semantic Elements:</description>
          <description>nav:
            Simply defines navigation links and helps us navigate between different pages. &lt;nav&gt; Navigation Links &lt;/nav&gt;

            header:
            funstions as a header for a document or section of the page. &lt;header&gt; Document Header &lt;/header&gt;

            footer:
            Basically acts as a footer for a document or section of the page. &lt;footer&gt; Document Footer &lt;/footer&gt;

            section:
            This is where the general information of the page is usually stored. &lt;section&gt; Document Secotion &lt;/section&gt;

            article:
            Article is where the more detailed information about the page is stored. &lt;article&gt; Document Article &lt;/article&gt;
            </description>
        </lesson>
        <assignment>
          <description>Create a website containing headers, paragraphs, and a link describing planet earth!</description>
        </assignment>
      </unit>
      <unit>
        <title>
          unit 2: Inputs
        </title>
        <lesson>
          <description>We use inputs simply to take information from the user in order to process it. 
            There are different ways to collect information/input in html such as:</description>
            <description>Input Type Text:</description>
            <description>Takes the text from the user through the input form</description>
            <description>&lt;form&gt;
                &lt;label&gt;Name:&lt;/label&gt;&lt;br&gt;
                &lt;input type="text"&gt;&lt;br&gt;
            &lt;/form&gt;</description>
            <description>Input Type Password:</description>
            <description>Takes the password from the user through the input form and hides it</description>

            <description>&lt;form&gt;
                &lt;label&gt;Password:&lt;/label&gt;&lt;br&gt;
                &lt;input type="password"&gt;&lt;br&gt;
            &lt;/form&gt;</description>

            <description>Input Type Submit:</description>
            <description>A submit button which would be configured to trigger a submission of the form</description>

            <description>&lt;form&gt;
                &lt;input type="submit" value="Submit"&gt;&lt;br&gt;
            &lt;/form&gt;</description>

            <description>Input Type Radio:</description>
            <description>You can only choose one of the radio buttons</description>

            <description>&lt;form&gt;
                &lt;label&gt;Choose your favorite unit:&lt;/label&gt;&lt;br&gt;
                &lt;input type="radio" value="unit1" name="fav_unit"&gt;
                &lt;label&gt;Unit 1 (HTML and CSS)&lt;/label&gt;&lt;br&gt;
                &lt;input type="radio" value="unit2" name="fav_unit"&gt;
                &lt;label&gt;Unit 2 (JavaScript)&lt;/label&gt;&lt;br&gt;
                &lt;input type="radio" value="unit3" name="fav_unit"&gt;
                &lt;label&gt;Unit 3 (XML and Ajax)&lt;/label&gt;&lt;br&gt;
            &lt;/form&gt;</description>

            <description>Input Type Checkbox:</description>
            <description>You can choose zero or more of the boxes</description>

            <description>&lt;form&gt;
                &lt;label&gt;Choose your favorite unit:&lt;/label&gt;&lt;br&gt;
                &lt;input type="checkbox" value="unit1"&gt;
                &lt;label&gt;Unit 1 (HTML and CSS)&lt;/label&gt;&lt;br&gt;
                &lt;input type="checkbox" value="unit2"&gt;
                &lt;label&gt;Unit 2 (JavaScript)&lt;/label&gt;&lt;br&gt;
                &lt;input type="checkbox" value="unit3"&gt;
                &lt;label&gt;Unit 3 (XML and Ajax)&lt;/label&gt;&lt;br&gt;
            &lt;/form&gt;</description>
        </lesson>
        <assignment>
          <description>Create a registration page that asks for name, email, phone number, password with a checkbox in addition to a submit button!</description>
        </assignment>
      </unit>
    </units>
    <quiz>
      <question>
        <inquiry>What tag is not correct</inquiry>
        <option>p</option>
        <option>a</option>
        <option>h</option>
        <option>o</option>
        <answer>o</answer>
      </question>
      <question>
        <inquiry>Which one is a correct way to declare a checkbox input type?</inquiry>
        <option>&lt;input type="checkbox" value="unit"&gt;</option>
        <option>&lt;input model="checkbox" value="unit"&gt;</option>
        <option>&lt;input id="checkbox" value="unit"&gt;</option>
        <option>&lt;input value="checkbox" type="unit"&gt;</option>
        <answer>&lt;input type="checkbox" value="unit"&gt;</answer>
      </question>
      <question>
        <inquiry>Which one is not a semantic element?</inquiry>
        <option>nav</option>
        <option>article</option>
        <option>color</option>
        <option>section</option>
        <answer>color</answer>
      </question>
      <question>
        <inquiry>What is the difference between checkbox and radio input?</inquiry>
        <option>you can select more than one option in radio but not in checkbox</option>
        <option>you can select more than one option in checkbox but not in radio</option>
        <option>checkbox is only for more than 2 options whereas radio is for 2 options only</option>
        <option>radio has a faster response time in comparison to checkbox input</option>
        <answer>you can select more than one option in checkbox but not in radio</answer>
      </question>
      <question>
        <inquiry>What does HTML stand for?</inquiry>
        <option>High Text Markup Long</option>
        <option>Hyper Text Markup Language</option>
        <option>Hyper Text Markup Long</option>
        <option>Hyper Tired Marking Language</option>
        <answer>Hyper Text Markup Language</answer>
      </question>
    </quiz>
  </course>

  <course>
    <title>
      CSS tutorial
    </title>
    <units>
      <unit>
        <title>
          Unit 1: Introduction and colors
        </title>
        <lesson>
            <description>CSS stands for Cascading Style Sheets
                and describes how HTML elements are to be displayed on screen, paper, or in other media.
                CSS saves a lot of work. It can control the layout of multiple web pages all at once
                External stylesheets are stored in CSS files</description>

            <description>Text Color:</description>
            <description>"color" attribute specifies the color of text</description>
            <description>css text: color: blue;</description>
            <description>Background Color:</description>
            <description>"background-color" attribute specifies the background color of text</description>
            <description>css text: background-color: grey;</description>
            <description>Border Color:</description>
            <description>"border-color" attribute specifies the border color of text, note that we must also include the border size</description>
            <description>css text: border: 2px solid red;</description>
        </lesson>
        <assignment>
          <description>Create a website with a blue paragraph, yellow background and a black border.</description>
        </assignment>
      </unit>
      <unit>
        <title>
          Unit 2: Text/Font manipulation
        </title>
        <lesson>
          <description>Text Font Family:</description>
          <description>"font-family" attribute specifies the family of the font</description>
          <description>css text: font-family: "Times New Roman", Times, serif;</description>
          <description>Text Font Size:</description>
          <description>"font-size" attribute specifies the size of the font</description>
          <description>css text: font-family: "Times New Roman", Times, serif;
              font-size: 24px;</description>
          <description>Text Alignment:</description>
          <description>"text-align" attribute specifies the alignment of the text, default text is aligned to the left</description>
          <description>css text: text-align: right;</description>
          <description>css text: text-align: center;</description>
        </lesson>
        <assignment>
          <description>In the website you previously created, apply the Arial font with the size 14 and align it in the center of the web page</description>
        </assignment>
      </unit>
      <unit>
        <title>
          Unit 3: Selectors
        </title>
        <lesson>
          <description>Selectors:</description>
          <description>If you take a look at the previous example it might confuse you as why css text for both cases of 
              alignment is actually the same! We use "selectors" to distinguish between these elements!
          </description>
          <description>For example, to apply an attribute to all the paragraphs we do the following: p {color: blue} Now all the paragraphs will be shown in blue text if we apply this</description>
          <description>To distinguish between different elements of the same type we can use <b>classes</b> or <b>ids</b></description>
          <description>To assign a class "blue" to a certain paragraph we do the following: &lt;p class="blue"&gt;Paragraph&lt;/p&gt;</description>
          <description>Now in css only add a "." before the class name to apply a certain style only specific to any element with class "blue"</description>
          <description>css text: .blue {color: blue}</description>
          <description>It is almost the exact same way with ids, only the way to declare them is a bit different.</description>
          <description>In css we just add "#" before the id name, and then simply write our css text in the same manner.</description>
        </lesson>
        <assignment>
          <description>Add a class to a paragraph and then in CSS apply the color red and font Arial to it</description>
        </assignment>
      </unit>
    </units>
    <quiz>
      <question>
        <inquiry>What does CSS stand for?</inquiry>
        <option>Cascading Style Sheets</option>
        <option>Classic Style Sheets</option>
        <option>Custom Style Sheets</option>
        <option>Cascading Style Shape</option>
        <answer>Cascading Style Sheets</answer>
      </question>
      <question>
        <inquiry>What is the purpose of CSS?</inquiry>
        <option>Handle the back-end of the application</option>
        <option>Deals with the database of the application</option>
        <option>Styling of the front-end of the application</option>
        <option>Business logic side of the application</option>
        <answer>Styling of the front-end of the application</answer>
      </question>
      <question>
        <inquiry>Which attribute is used for changing the color of text?</inquiry>
        <option>text-color</option>
        <option>color-text</option>
        <option>color</option>
        <option>colour</option>
        <answer>color</answer>
      </question>
      <question>
        <inquiry>How can we change the style of a certain class in CSS?</inquiry>
        <option>using "." before the class name</option>
        <option>using "#" before the class name</option>
        <option>using "*" before the class name</option>
        <option>using "$" before the class name</option>
        <answer>using "." before the class name</answer>
      </question>
      <question>
        <inquiry>How can we align a paragraph to the left?</inquiry>
        <option>p {align: left}</option>
        <option>p {align-side: left}</option>
        <option>p {align: L}</option>
        <option>p {align-text: left}</option>
        <answer>p {align-text: left}</answer>
      </question>
    </quiz>
  </course>

  <course>
    <title>
      Javascript tutorial
    </title>
    <units>
      <unit>
        <title>
          Unit 1: Introduction and basics
        </title>
        <lesson>
          <description>
            often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. As of 2022, 98% of websites use JavaScript on the client side for webpage behavior, often incorporating third-party libraries.
          </description>
          
          <description>Variables</description>
          <description>Different Variable Declarations:</description>
          <description>var: variable</description>
          <description>let: variable which the type cannot change</description>
          <description>cont: contant type</description>
          <description>You can declare a variable by simply writing the following: var a = 1; By doing this we are assinging the value 1 to variable a.</description>
          <description>Any type of data can be assigned using this method including strings. For example, var s = "Hello World!";</description>
          

          <description>Operators</description>
          <description>Different Operators:</description>
          <description>+: addition</description>
          <description>-: subtraction</description>
          <description>*: multiplication</description>
          <description>/: division</description>
          <description>Example var a = 1; var b = -1; var c = a + b;</description>
          <description>In this simple arithmetic operation we get that c = 0!</description>

          <description>Arrays</description>
          <description>We can have a list of variables by using arrays. For example, we can have a list of colors:</description>
          <description>const colors = ["red", "green", "blue", "purple"]</description>
        </lesson>
        <assignment>
          <description>Declare an Array and set the first value as an integer of value 2, then add the first value in the array to the number 5 and output the result</description>
        </assignment>
      </unit>
      <unit>
        <title>
          Unit 2: Advanced Operations (For loop, functions, objects and etc.)
        </title>
        <lesson>
        <description>If Else Statements</description>
        <description>Imagine a simple case which you want your program to work differently based on different conditions, we do this using if else statements</description>
        <description>For example, if a > 0 I want to assing the value 1 to b otherwise 0</description>
        <description>We write the following code:  if(a > 0) { b = 1 } else { b = 0 }</description>

        <description>For Loops</description>
        <description>When we want to iterate over a sequence and perform a certain action, we use for loops. For example, if I want to write "Hello World!" 5 times to the console, we do the following:</description>
        <description>for(var i = 0; i &lt; 5; i++){ console.log("Hello World!") }</description>

        <description>Functions</description>
        <description>Functions basically can take an input and perform an action. For example, if I want to add 1 to the input:</description>
        <description>function add_one(n){ return n + 1; } add_one(1), this statement would return the value 2 to us!</description>

        <description>Objects</description>
        <description>We can define an object and give it many properties. For example, a car that has a certain color, speed, price.</description>
        <description>const car = {speed:"150", price:"50,000$", color:"white"};</description>
        <description>We can access these properties by simply writing this: car.price!</description>

        <description>changing html elements</description>
        <description>We are able to manipulate the HTML elements using their id attribute and using the innerHTML property. For example, we can change the paragraph element with id="hello"</description>
        <description>document.getElementById("hello").innerHTML = "Hello, world!"</description>
        <description>Now we are changing whatever was in that paragraph with "Hello, world!"</description>
        </lesson>
        <assignment>
          <description>Create a function and declare an object within it with a random number, then using a for loop increment that number 4 times and if that number is even change the value of
            the element with id="result" to even, otherwise odd!
          </description>
        </assignment>
      </unit>
    </units>
    <quiz>
      <question>
        <inquiry>Roughly how many percent of websites use JavaScript?</inquiry>
        <option>38%</option>
        <option>49%</option>
        <option>82%</option>
        <option>98%</option>
        <answer>98%</answer>
      </question>
      <question>
        <inquiry>Which one is not a way to declare a variable?</inquiry>
        <option>var</option>
        <option>int</option>
        <option>const</option>
        <option>let</option>
        <answer>int</answer>
      </question>
      <question>
        <inquiry>Which one is the operator for multiplication?</inquiry>
        <option>&amp;</option>
        <option>#</option>
        <option>*</option>
        <option>x</option>
        <answer>*</answer>
      </question>
      <question>
        <inquiry>Which for loop is correct?</inquiry>
        <option>for(int i = 0; i &lt; n; i++){...}</option>
        <option>while(int i = 0; i &lt; n; i++){...}</option>
        <option>for(int i == 0; i &lt; n; i++){...}</option>
        <option>for(int i = 0, i &lt; n, i++){...}</option>
        <answer>for(int i = 0; i &lt; n; i++){...}</answer>
      </question>
      <question>
        <inquiry>Which one is the correct way to declare an array called "a" with element 1 and 2?</inquiry>
        <option>array a = [1, 2]</option>
        <option>let a = [1, 2]</option>
        <option>var a = [1, 2]</option>
        <option>const a = [1, 2]</option>
        <answer>const a = [1, 2]</answer>
      </question>
    </quiz>
  </course>

  <course>
    <title>
      XML and Ajax tutorial
    </title>
    <units>
      <unit>
        <title>
          Unit 1: XML
        </title>
        <lesson>
          <description>Extensible Markup Language (XML) is a markup language and file format for storing, transmitting, and reconstructing arbitrary data. 
            It defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.</description>
      

          <description>Most important aspect of using XML is that it is reusable, compared to HTML it saves a lot of time while developing a web page</description>
          

          <description>XML Elements</description>
          <description>Different Elements:</description>
          <description>text</description>
          <description>attributes</description>
          <description>other attributes</description>
          <description>mix of all</description>

          <description>XSD</description>
          <description>XSD (XML Schema Definition), a recommendation of the World Wide Web Consortium (W3C), specifies how to formally describe the elements in an Extensible Markup Language (XML) document. 
              It can be used by programmers to verify each piece of item content in a document, to assure it adheres to the description of the element it is placed in.</description>
          

          <description>XSL</description>
          <description>XSLT (Extensible Stylesheet Language Transformations) is the recommended style sheet language for XML.
              XSLT is far more sophisticated than CSS. With XSLT you can add/remove elements and attributes to or from the output file. You can also rearrange and sort elements, perform tests and make decisions about which elements to hide and display, and a lot more.
              XSLT uses XPath to find information in an XML document.</description>
        </lesson>
        <assignment>
          <description>Create an XML document about course structures in a university and apply XSD as well as XSL to it.</description>
        </assignment>
      </unit>
      <unit>
        <title>
          Unit 2: XML
        </title>
        <lesson>
          <description>Ajax  is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. With Ajax, web applications can send and retrieve data from a server asynchronously 
            (in the background) without interfering with the display and behaviour of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows web pages and, by extension, web applications, 
            to change content dynamically without the need to reload the entire page.</description>
        
          <description>Https Request</description>
          <description>The XMLHttpRequest object can be used to request data from a web server. It's very useful since you
              Update a web page without reloading the page.</description>

          <description>new XMLHttpRequest(): Creates a new XMLHttpRequest object</description>
          <description>abort(): Cancels the current request</description>
          <description>getAllResponseHeaders(): Returns header information</description>
          <description>getResponseHeader(): Returns specific header information</description>
          <description>open(method,url,async,user,psw): Specifies the request
              method: the request type GET or POST
              url: the file location
              async: true (asynchronous) or false (synchronous)
              user: optional user name
              psw: optional password</description>
          <description>send(): Sends the request to the server, used for GET requests</description>
          <description>send(string): Sends the request to the server, used for POST requests</description>
          <description>setRequestHeader(): Adds a label/value pair to the header to be sent</description>
        </lesson>
        <assignment>
          <description>Create a website that prevents the entire page reloading by using Ajax methodologies for replacing a div within your website.</description>
        </assignment>
      </unit>
    </units>
    <quiz>
      <question>
        <inquiry>What does XML stand for?</inquiry>
        <option>Extensible Markup Language</option>
        <option>Excess Markup Language</option>
        <option>Extensible Machine Language</option>
        <option>Extensible Machine Line</option>
        <answer>Extensible Markup Language</answer>
      </question>
      <question>
        <inquiry>Most important reason for using XML instead of HTML?</inquiry>
        <option>Lower level language and faster compile time</option>
        <option>Simpler language syntax</option>
        <option>Reusability of the code</option>
        <option>More established in the industry</option>
        <answer>Reusability of the code</answer>
      </question>
      <question>
        <inquiry>Best way to apply styling to XML elements?</inquiry>
        <option>XSD</option>
        <option>XSL</option>
        <option>In-line styling</option>
        <option>Javascript</option>
        <answer>XSL</answer>
      </question>
      <question>
        <inquiry>What is Ajax?</inquiry>
        <option>Ajax  is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications.</option>
        <option>Ajax  is a set of frameworks that uses various web technologies on the client-side to create asynchronous web applications.</option>
        <option>Ajax  is a set of development techniques that uses various web technologies on the server-side to create synchronous mobile applications.</option>
        <option>Ajax  is a set of programming languages that uses various web technologies on the client-side to create asynchronous web applications.</option>
        <answer>Ajax  is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications.</answer>
      </question>
      <question>
        <inquiry>What is Https Request?</inquiry>
        <option>XMLHttpRequest is used to request data from a web server</option>
        <option>Https request helps with connecting to another file locally</option>
        <option>Https request is a function that creates a buffer between files</option>
        <option>XMLHttpsRequest creates a XML request for a css style file</option>
        <answer>XMLHttpRequest is used to request data from a web server</answer>
      </question>
    </quiz>
  </course>

  <course>
    <title>
      SQL tutorial
    </title>
    <units>
      <unit>
        <title>
          Unit 1: Introduction and Databases and Tables
        </title>
        <lesson>
          <description>Structured Query Language, abbreviated as SQL is a domain-specific language used in programming and designed 
            for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data, i.e. data incorporating relations among entities and variables.
          It is noteworthy that SQL is case insensitive, for example SELECT and select command are no different in practice, however most developers choose to use the uppercase style!</description>
          <description>We are able to create a database or a table using the CREATE command! for example:</description>
          <description>Let's say we want to create a database called "my_db" we can use the following command in our development environment CREATE DATABASE my_db</description>
          <description>Now if we want to create a table called "my_table" with two two columns name and age, we can use the following command in our development environment: CREATE TABLE my_db(name TEXT, age INT);</description>
          <description>The columns in each table stores the information within it with a specifed type that we declare!</description>          
          <description>
            In the event that we want to destroy a table or a database we use the command DROP!
            For example, if we wanted to drop a table we use the command DROP TABLE my_table; and for dropping a database we use the command DROP DATABASE my_db;
          </description>
        </lesson>
        <assignment>
          <description>Create a database called assignment and create two tables within it with the first one having two columns first name and last name, and for the second one having 3 columns that are id, name and email.</description>
        </assignment>
      </unit>
      <unit>
        <title>
          Unit 2: SELECT
        </title>
        <lesson>
          <description>The SELECT command is very helpful when we want to fetch any data from our database. It is quite simple and easy to use, for example:</description>
          <description>SELECT * FROM users; this command will return both the emails and passwords of all the users in the table, if you want to choose only the email or the password you can replace the * with the column name: SELECT email FROM users;</description>
        </lesson>
        <assignment>
          <description>ENTER a record in the tables you previously created in the last assignment and update the same record and then delete that record.</description>
        </assignment>
      </unit>
    </units>
    <quiz>
      <question>
        <inquiry>What does SQL stand for?</inquiry>
        <option>Structured Question Language</option>
        <option>Structured Query Long</option>
        <option>Structured Query Language</option>
        <option>Simple Query Language</option>
        <answer>Structured Query Language</answer>
      </question>
      <question>
        <inquiry>How to add a new record to the table users in SQL?</inquiry>
        <option>ADD TO users RECORD (...)</option>
        <option>INSERT INTO users VALUES (...)</option>
        <option>UPDATE users VALUES (...)</option>
        <option>ENTER INTO users VALUES (...)</option>
        <answer>INSERT INTO users VALUES (...)</answer>
      </question>
      <question>
        <inquiry>How can we create a new database called my_db in SQL?</inquiry>
        <option>CREATE DB name="my_db"</option>
        <option>NEW DATABASE my_db</option>
        <option>BUILD DB my_db</option>
        <option>CREATE DATABASE my_db</option>
        <answer>CREATE DATABASE my_db</answer>
      </question>
      <question>
        <inquiry>How can we verify a user with a SQL command only having their username and password?</inquiry>
        <option>SELECT * FROM table WHERE username = "username" AND password = "password"</option>
        <option>CHECK FROM table WHERE username = "username" AND password = "password"</option>
        <option>VERIFY IN table WHERE username = "username" AND password = "password"</option>
        <option>INSERT * INTO table (username, password)</option>
        <answer>SELECT * FROM table WHERE username = "username" AND password = "password"</answer>
      </question>
      <question>
        <inquiry>How can we create a table called my_app with a SQL command that has 3 columns which are (id, username, password)?</inquiry>
        <option>CREATE TABLE my_app (id, username, password)</option>
        <option>CREATE TABLE my_app (id INT, username TEXT, password TEXT)</option>
        <option>CREATE APP my_app (id, username, password)</option>
        <option>BUILD TABLE my_app (id INT, username TEXT, password TEXT)</option>
        <answer>CREATE TABLE my_app (id INT, username TEXT, password TEXT)</answer>
      </question>
    </quiz>
  </course>
</university>